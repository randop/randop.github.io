<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Randolph Ledesma Blog</title>
  <subtitle>Discover expert insights, practical tips, and engaging stories on AI vibe coding, web development and programming.</subtitle>
  <link href="https://randop.github.io/feed.xml" rel="self" />
  <link href="https://randop.github.io/" />
  <updated>2019-07-17T02:00:00Z</updated>
  <id>https://randop.github.io/</id>
  <author>
    <name>Randolph Ledesma</name>
  </author>
  <entry>
    <title>Quick PHP Debugging</title>
    <link href="https://randop.github.io/2018/01/18/quick-php-debugging/" />
    <updated>2018-01-18T02:00:00Z</updated>
    <id>https://randop.github.io/2018/01/18/quick-php-debugging/</id>
    <content type="html">&lt;p&gt;Put this on top of your script and easily see the errors and warnings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
error_reporting(E_ALL ^ E_DEPRECATED);
ini_set(&#39;error_reporting&#39;, E_ALL ^ E_DEPRECATED);
ini_set(&#39;display_startup_errors&#39;, 1);
ini_set(&#39;display_errors&#39;, 1);
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>PHP Console Template</title>
    <link href="https://randop.github.io/2018/05/24/php-console-template/" />
    <updated>2018-05-24T02:00:00Z</updated>
    <id>https://randop.github.io/2018/05/24/php-console-template/</id>
    <content type="html">&lt;p&gt;A template to use when making a script that runs in command-line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
ini_set(&#39;memory_limit&#39;, &#39;256M&#39;);
function stdoutlog($msg)
{
    fwrite(STDOUT, date(&#39;Y-m-d G:i:s&#39;) . &#39; &#39;);
    fwrite(STDOUT, $msg);
    fwrite(STDOUT, PHP_EOL);
}
function log_error( $num, $str, $file, $line, $context = null )
{
    log_exception( new ErrorException( $str, 0, $num, $file, $line ) );
}
function log_exception( Exception $e )
{
    $err = &amp;quot;Type: &amp;quot; . get_class( $e ) . &amp;quot;; Message: {$e-&amp;gt;getMessage()}; File: {$e-&amp;gt;getFile()}; Line: {$e-&amp;gt;getLine()};&amp;quot;;
    stdoutlog($err);
}
function check_for_fatal()
{
    $error = error_get_last();
    if ( $error[&amp;quot;type&amp;quot;] == E_ERROR ) {
        log_error( $error[&amp;quot;type&amp;quot;], $error[&amp;quot;message&amp;quot;], $error[&amp;quot;file&amp;quot;], $error[&amp;quot;line&amp;quot;] );
    }
}
register_shutdown_function( &amp;quot;check_for_fatal&amp;quot; );
set_error_handler( &amp;quot;log_error&amp;quot; );
set_exception_handler( &amp;quot;log_exception&amp;quot; );
error_reporting(E_ALL &amp;amp; ~(E_STRICT|E_NOTICE|E_DEPRECATED|E_USER_DEPRECATED));
ini_set(&#39;error_reporting&#39;, E_ALL &amp;amp; ~(E_STRICT|E_NOTICE|E_DEPRECATED|E_USER_DEPRECATED));
chdir( realpath( __DIR__) );
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Find function declaration in PHP</title>
    <link href="https://randop.github.io/2018/08/31/find-function-declaration-in-php/" />
    <updated>2018-08-31T02:00:00Z</updated>
    <id>https://randop.github.io/2018/08/31/find-function-declaration-in-php/</id>
    <content type="html">&lt;p&gt;This is a simple way to find where the function is defined on your script&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$reflFunc = new ReflectionFunction(&#39;function_name&#39;);
print $reflFunc-&amp;gt;getFileName() . &#39;:&#39; . $reflFunc-&amp;gt;getStartLine();
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Useful array map</title>
    <link href="https://randop.github.io/2018/09/13/useful-array-map/" />
    <updated>2018-09-13T02:00:00Z</updated>
    <id>https://randop.github.io/2018/09/13/useful-array-map/</id>
    <content type="html">&lt;p&gt;Here is an example of array_map function to produce a string by appending each content of a flat array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$the_ids = [1,2,3,4];
echo implode(&#39; OR &#39;, array_map( function($id){ return &#39;id=&#39; . $id; }, $the_ids ) );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Produces the following output:
id=1 OR id=2 OR id=3 OR id=4&lt;/p&gt;
&lt;p&gt;This can be useful when trying to pass a where condition on a sql.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Add SSL functionality without any changes on application code</title>
    <link href="https://randop.github.io/2018/10/22/add-ssl-functionality-without-any-changes-on-application-code/" />
    <updated>2018-10-22T02:00:00Z</updated>
    <id>https://randop.github.io/2018/10/22/add-ssl-functionality-without-any-changes-on-application-code/</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;https://www.stunnel.org/&quot;&gt;Stunnel&lt;/a&gt; program is designed to work as an SSL encryption wrapper between remote client and local (inetd-startable) or remote server. It can be used to add SSL functionality to commonly used inetd daemons like POP2, POP3, and IMAP servers without any changes in the program’s code.&lt;/p&gt;
&lt;p&gt;What &lt;a href=&quot;https://www.stunnel.org/&quot;&gt;Stunnel&lt;/a&gt; basically does is that it turns any insecure TCP port into a secure encrypted port using OpenSSL package for cryptography. It’s somehow like a small secure VPN that runs on specific ports.&lt;/p&gt;
&lt;p&gt;More information on setting up Stunnel can be found here &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-an-ssl-tunnel-using-stunnel-on-ubuntu&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-set-up-an-ssl-tunnel-using-stunnel-on-ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An example configuration for stunnel.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;; Sample stunnel configuration file for Unix by Michal Trojnara 2002-2014
; Some options used here may be inadequate for your particular configuration
; This sample file does *not* represent stunnel.conf defaults
; Please consult the manual for detailed description of available options

; **************************************************************************
; * Global options                                                         *
; **************************************************************************

; A copy of some devices and system files is needed within the chroot jail
; Chroot conflicts with configuration file reload and many other features
; Remember also to update the logrotate configuration.
;chroot = /var/lib/stunnel4/
; Chroot jail can be escaped if setuid option is not used
;setuid = stunnel4
;setgid = stunnel4

; PID file is created inside the chroot jail (if enabled)
pid = /var/run/stunnel4.pid

; Debugging stuff (may be useful for troubleshooting)
;debug = 7
;output = /var/log/stunnel4/stunnel.log

; **************************************************************************
; * Service defaults may also be specified in individual service sections  *
; **************************************************************************

; Certificate/key is needed in server mode and optional in client mode
cert = /etc/stunnel/stunnel.pem
;key = /etc/stunnel/mail.pem

[ot1]
accept = 5061
connect = 5062
TIMEOUTclose = 0

[ot2]
accept = 444
connect = 5062
TIMEOUTclose = 0

; vim:ft=dosini
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>PHP Debugging Utility using Monolog</title>
    <link href="https://randop.github.io/2018/12/19/php-debugging-utility-using-monolog/" />
    <updated>2018-12-19T02:00:00Z</updated>
    <id>https://randop.github.io/2018/12/19/php-debugging-utility-using-monolog/</id>
    <content type="html">&lt;p&gt;Have created a debug helper script which is very useful for tracing issues in PHP.&lt;/p&gt;
&lt;h4&gt;Requirements:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Composer&lt;/li&gt;
&lt;li&gt;Monolog&lt;/li&gt;
&lt;li&gt;localheinz/json-printer&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Installation:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;composer require monolog/monolog localheinz/json-printer
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Script&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Monolog&#92;Logger;
use Monolog&#92;ErrorHandler;
use Monolog&#92;Formatter&#92;CustomLineFormatter;
use Monolog&#92;Handler&#92;StreamHandler;
use Monolog&#92;Processor&#92;IntrospectionProcessor;
use Localheinz&#92;Json&#92;Printer&#92;Printer;
//set this to desired log directory
$logdir = &amp;quot;&amp;quot;;
$traceprinter = new Printer();
$traceformatter = new Monolog&#92;Formatter&#92;CustomLineFormatter(
    null,
    null,
    true,
    true
);
// create a log channel
$monolog = new Logger(&#39;randolph&#39;);
ErrorHandler::register($monolog);
$monolog-&amp;gt;pushProcessor(new IntrospectionProcessor());
$debugstream = new StreamHandler($logdir. &#39;/debug.log&#39;, Logger::DEBUG);
$debugstream-&amp;gt;setFormatter($traceformatter);
$monolog-&amp;gt;pushHandler($debugstream);
// create a trace log channel
$tracelog = new Logger(&#39;randolph&#39;);
//$tracelog-&amp;gt;pushProcessor(new IntrospectionProcessor());
$tracestream = new StreamHandler($logdir . &#39;/trace.log&#39;, Logger::DEBUG);
$tracestream-&amp;gt;setFormatter($traceformatter);
$tracelog-&amp;gt;pushHandler($tracestream);
function dtrace($msg=&#39;&#39;) {
    global $tracelog, $traceprinter;
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 1);
    $context = [
        &#39;debug_backtrace&#39; =&amp;gt; $backtrace[0]
    ];
    if ( is_string($msg) || is_integer($msg) || is_bool($msg) ) {
        $tracelog-&amp;gt;debug($msg);
    } elseif ( is_object($msg) || is_array($msg) ) {
        $tracelog-&amp;gt;debug( $traceprinter-&amp;gt;pprint(json_encode($msg), &#39;  &#39;), $context );
    } else {
        $tracelog-&amp;gt;debug( var_export($msg, true) );
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Embed a &lt;video&gt; in responsive way</title>
    <link href="https://randop.github.io/2019/02/05/embed-a-video-in-responsive-way/" />
    <updated>2019-02-05T02:00:00Z</updated>
    <id>https://randop.github.io/2019/02/05/embed-a-video-in-responsive-way/</id>
    <content type="html">&lt;p&gt;This is how to embed a video on a page and make it responsive.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
.video-responsive{
    overflow:hidden;
    padding-bottom:56.25%;
    position:relative;
    height:0;
}
.video-responsive iframe{
    left:0;
    top:0;
    height:100%;
    width:100%;
    position:absolute;
}
&amp;lt;/style&amp;gt;

&amp;lt;div class=&amp;quot;video-responsive&amp;quot;&amp;gt;
    &amp;lt;iframe src=&amp;quot;https://www.youtube.com/embed/XXXXX&amp;quot; 
        frameborder=&amp;quot;0&amp;quot; 
        width=&amp;quot;970&amp;quot; height=&amp;quot;548&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Using Reflection to access protected properties in PHP</title>
    <link href="https://randop.github.io/2019/04/15/using-reflection-to-access-protected-properties-in-php/" />
    <updated>2019-04-15T02:00:00Z</updated>
    <id>https://randop.github.io/2019/04/15/using-reflection-to-access-protected-properties-in-php/</id>
    <content type="html">&lt;p&gt;Here is how to access protected class properties. Reflection is generally a method for   inspecting classes and modify its logic at execution time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$class = new ReflectionClass($classInstance);
$property = $class-&amp;gt;getProperty(&amp;quot;properties&amp;quot;);
$property-&amp;gt;setAccessible(true);
$properties = $property-&amp;gt;getValue($number);
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Timezone Conversion</title>
    <link href="https://randop.github.io/2019/05/16/timezone-conversion/" />
    <updated>2019-05-16T02:00:00Z</updated>
    <id>https://randop.github.io/2019/05/16/timezone-conversion/</id>
    <content type="html">&lt;p&gt;Converting a timestamp from and to a different timezones.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$timestamp=&#39;2019-05-16 07:56:00&#39;;
$format=&amp;quot;Y-m-d H:i:s&amp;quot;;
$from_timezone=&#39;Asia/Manila&#39;;
$to_timezone=&#39;America/Chicago&#39;;
$source_timezone = new DateTimeZone($from_timezone);
$destination_timezone = new DateTimeZone($to_timezone);
$datetime = new DateTime($timestamp, $source_timezone);
$offset = $destination_timezone-&amp;gt;getOffset($datetime);
$newdate = date($format, $datetime-&amp;gt;format(&#39;U&#39;) + $offset);
echo $newdate;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Sanitizing Links</title>
    <link href="https://randop.github.io/2019/07/17/sanitizing-links/" />
    <updated>2019-07-17T02:00:00Z</updated>
    <id>https://randop.github.io/2019/07/17/sanitizing-links/</id>
    <content type="html">&lt;p&gt;Script to sanitize links on string. This can be useful when trying to format links from untrusted sources.&lt;/p&gt;
&lt;h4&gt;Requirements:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;composer&lt;/li&gt;
&lt;li&gt;php-xml&lt;/li&gt;
&lt;li&gt;php-mbstring&lt;/li&gt;
&lt;li&gt;ezyang/htmlpurifier&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Installation:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;composer require ezyang/htmlpurifier
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Codes:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
function fix_special_links($text=&#39;&#39;) {
    $fixed = $text;
    $fixed = str_replace(&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt;&amp;quot;, &amp;quot;/&amp;gt; &amp;lt;br&amp;gt;&amp;quot;, $fixed);
    $fixed = str_replace(&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;&amp;quot;, &amp;quot;/&amp;gt; &amp;lt;br&amp;gt;&amp;quot;, $fixed);
    $fixed = preg_replace(&amp;quot;#&#92;&amp;lt;http:&#92;/&#92;/(.*)(&#92;/&#92;&amp;gt;)+#i&amp;quot;, &amp;quot;(http://$1)&amp;quot;, $fixed);
    $fixed = preg_replace(&amp;quot;#&#92;&amp;lt;https:&#92;/&#92;/(.*)(&#92;/&#92;&amp;gt;)+#i&amp;quot;, &amp;quot;(https://$1)&amp;quot;, $fixed);
    return $fixed;
}
function sanitize_links($text=&#39;&#39;) {
    $text = $this-&amp;gt;fix_special_links($text);
    $config = &#92;HTMLPurifier_Config::createDefault();
    $purifier = new &#92;HTMLPurifier($config);
    $text = $purifier-&amp;gt;purify($text);
    $return = $text;
    try {
        libxml_use_internal_errors(true);
        libxml_clear_errors();
        $doc = new DOMDocument(&#39;1.0&#39;, &#39;UTF-8&#39;);
        $doc-&amp;gt;preserveWhiteSpace = false;
        $doc-&amp;gt;loadHTML( mb_convert_encoding($text, &#39;HTML-ENTITIES&#39;, &#39;UTF-8&#39;));
        $links = $doc-&amp;gt;getElementsByTagName(&#39;a&#39;);
        //Loop through each &amp;lt;a&amp;gt; tags and replace them by their text content
        for ($i = $links-&amp;gt;length - 1; $i &amp;gt;= 0; $i--) {
            $linkNode = $links-&amp;gt;item($i);
            $lnkText = $linkNode-&amp;gt;textContent;
            $newTxtNode = $doc-&amp;gt;createTextNode($lnkText);
            $linkNode-&amp;gt;parentNode-&amp;gt;replaceChild($newTxtNode, $linkNode);
        }
        $return = $doc-&amp;gt;saveHTML($doc-&amp;gt;documentElement);
        $return = str_replace( array(&#39;&amp;lt;html&amp;gt;&#39;, &#39;&amp;lt;/html&amp;gt;&#39;, &#39;&amp;lt;body&amp;gt;&#39;, &#39;&amp;lt;/body&amp;gt;&#39;), array(&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;), $return);
    } catch (Exception $e) {
        //fallback on using preg_replace
        $return = preg_replace(&#39;#&amp;lt;a.*?&amp;gt;([^&amp;gt;]*)&amp;lt;/a&amp;gt;#i&#39;, &#39;$1&#39;, $text);
    }
    $return = str_replace(&amp;quot;&amp;gt;&#92;n&amp;lt;&amp;quot;, &amp;quot;&amp;gt;&amp;lt;&amp;quot;, $return);
    $return = str_replace(&amp;quot;&amp;gt;&#92;r&amp;lt;&amp;quot;, &amp;quot;&amp;gt;&amp;lt;&amp;quot;, $return);
    return $return;
}
function sanitize_string($string=&#39;&#39;) {
    $string = iconv(&amp;quot;Windows-1251&amp;quot;, &amp;quot;UTF-8&amp;quot;, $string);
    $string = preg_replace(&#39;/[&#92;x{2019}&#92;x{2018}&#92;x{2019}&#92;x{201A}&#92;x{201B}&#92;x{2032}&#92;x{2035}]/u&#39;, &amp;quot;&#39;&amp;quot;, $string);
    $string = preg_replace(&#39;/[&#92;x{201C}&#92;x{201D}&#92;x{201E}&#92;x{201F}&#92;x{2033}&#92;x{2036}]/u&#39;, &#39;&amp;quot;&#39;, $string);
    $string = preg_replace(&#39;/[[:^print:]]/&#39;, &amp;quot;&amp;quot;, $string);
    return $string;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Usage:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$string = &amp;quot;String with links &amp;lt;a href=&#39;https://randolphledesma.com&#39;&amp;gt;https://randolphledesma.com&amp;lt;/a&amp;gt;&amp;quot;;
echo sanitize_links($string);
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>